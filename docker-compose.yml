version: '3.8'

services:
<<<<<<< HEAD
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: testflow_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: testflow_root_2024
      MYSQL_DATABASE: testflow_pro
      MYSQL_USER: testflow_user
      MYSQL_PASSWORD: testflow_pass_2024
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - app_network
    command: --default-authentication-plugin=mysql_native_password

  # PHP Application
  app:
    image: php:8.2-fpm-alpine
    container_name: testflow_app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./public:/var/www/html/public
      - ./uploads:/var/www/html/public/uploads
    networks:
      - app_network
    command: sh -c "
      apk add --no-cache mysql-client &&
      docker-php-ext-install pdo_mysql mysqli &&
      php-fpm
    "

  # Nginx Web Server
=======
  # Web Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: testflow_app
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./storage:/var/www/html/storage
      - ./database:/var/www/html/database
      - ./public/attachments:/var/www/html/public/attachments
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=base64:sSCM1QNmqBBQ0kDOs6JFmHIRGIbbUJJJP6jkXH3t8ag=
      - DB_CONNECTION=sqlite
      - DB_DATABASE=/var/www/html/database/database.sqlite
      - CACHE_DRIVER=file
      - SESSION_DRIVER=file
      - QUEUE_CONNECTION=database
    depends_on:
      - redis
    networks:
      - testflow_network

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: testflow_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - testflow_network

  # Nginx Reverse Proxy
>>>>>>> 6fee269a179af23a34b06b68b49bbe716ca69c19
  nginx:
    image: nginx:alpine
    container_name: testflow_nginx
    restart: unless-stopped
    ports:
<<<<<<< HEAD
      - "9899:80"
    volumes:
      - ./public:/var/www/html/public:ro
    depends_on:
      - app
    networks:
      - app_network
    command: |
      sh -c "
      cat > /etc/nginx/conf.d/default.conf << 'EOF'
      server {
          listen 80;
          server_name cms-prod.baseel.com;
          root /var/www/html/public;
          index index.php index.html;
          
          location ~ \.php$$ {
              try_files $$uri =404;
              fastcgi_pass app:9000;
              fastcgi_index index.php;
              fastcgi_param SCRIPT_FILENAME $$document_root$$fastcgi_script_name;
              include fastcgi_params;
          }
          
          location / {
              try_files $$uri $$uri/ /index.php?$$query_string;
          }
          
          location ~* \.(jpg|jpeg|png|gif|ico|css|js)$$ {
              expires 1y;
              add_header Cache-Control 'public, immutable';
          }
      }
      EOF
      nginx -g 'daemon off;'
      "

volumes:
  mysql_data:

networks:
  app_network:
=======
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - testflow_network

  # Database Backup Service
  backup:
    image: alpine:latest
    container_name: testflow_backup
    restart: unless-stopped
    volumes:
      - ./database:/data/database
      - ./backups:/data/backups
      - ./backup.sh:/backup.sh
    command: sh -c "chmod +x /backup.sh && crond -f"
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    networks:
      - testflow_network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: testflow_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - testflow_network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: testflow_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - testflow_network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  testflow_network:
>>>>>>> 6fee269a179af23a34b06b68b49bbe716ca69c19
    driver: bridge
