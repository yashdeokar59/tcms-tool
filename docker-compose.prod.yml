version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: testflow_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-testflow_root_2024}
      MYSQL_DATABASE: ${DB_DATABASE:-testflow_pro}
      MYSQL_USER: ${DB_USERNAME:-testflow_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-testflow_pass_2024}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/custom.cnf:ro
    ports:
      - "3306:3306"
    networks:
      - testflow_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: testflow_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - testflow_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-testflow_redis_2024}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PHP Application
  app:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
      target: production
    container_name: testflow_app
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY:-base64:sSCM1QNmqBBQ0kDOs6JFmHIRGIbbUJJJP6jkXH3t8ag=}
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-testflow_pro}
      - DB_USERNAME=${DB_USERNAME:-testflow_user}
      - DB_PASSWORD=${DB_PASSWORD:-testflow_pass_2024}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-testflow_redis_2024}
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    volumes:
      - ./storage:/var/www/html/storage
      - ./public/attachments:/var/www/html/public/attachments
      - ./logs:/var/www/html/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - testflow_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health.php"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: testflow_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./public:/var/www/html/public:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - testflow_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
      target: production
    container_name: testflow_queue
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-testflow_pro}
      - DB_USERNAME=${DB_USERNAME:-testflow_user}
      - DB_PASSWORD=${DB_PASSWORD:-testflow_pass_2024}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-testflow_redis_2024}
    volumes:
      - ./storage:/var/www/html/storage
      - ./logs:/var/www/html/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - testflow_network
    command: php /var/www/html/queue-worker.php

  # Backup Service
  backup:
    image: mysql:8.0
    container_name: testflow_backup
    restart: unless-stopped
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_USER=${DB_USERNAME:-testflow_user}
      - MYSQL_PASSWORD=${DB_PASSWORD:-testflow_pass_2024}
      - MYSQL_DATABASE=${DB_DATABASE:-testflow_pro}
    volumes:
      - ./backups:/backups
      - ./docker/backup/backup.sh:/backup.sh:ro
    depends_on:
      - mysql
    networks:
      - testflow_network
    command: sh -c "chmod +x /backup.sh && crond -f"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: testflow_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - testflow_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: testflow_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://your-domain.com/grafana/
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    depends_on:
      - prometheus
    networks:
      - testflow_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  testflow_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
